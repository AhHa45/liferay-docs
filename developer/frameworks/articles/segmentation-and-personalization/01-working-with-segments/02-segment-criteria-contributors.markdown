# Segment Criteria Contributors

To demonstrate the Segment Criteria Contributor, create one that will segment users based on the title of the Knowledge Base articles they have authored.

The first step is to make your related entity searchable through OData queries. For this purpose, you will need two classes:

*  An `EntityModel` that represents your associated entity (in this case, the 
    `KBArticle`) with its fields of interest.

*  An `ODataRetriever`, that obtains the `KBArticles` that match a given OData 
    query.
    
You can view the [full project on Github](https://github.com/epgarcia/liferay-portal/tree/LPS-86249.criteria.extension.sample.2/modules/apps/segments/segments-criteria-extension-sample).


@Component(
	immediate = true,
	property = "model.class.name=com.liferay.knowledge.base.model.KBArticle",
	service = ODataRetriever.class
)
public class KBArticleODataRetriever implements ODataRetriever<KBArticle> {

	@Override
	public List<KBArticle> getResults(
			long companyId, String filterString, Locale locale, int start,
			int end)
		throws PortalException {

		Hits hits = _oDataSearchAdapter.search(
			companyId, filterString, KBArticle.class.getName(), _entityModel,
			_getFilterParser(), locale, start, end);

		return _getKBArticles(hits);
	}

	@Override
	public int getResultsCount(
			long companyId, String filterString, Locale locale)
		throws PortalException {

		return _oDataSearchAdapter.searchCount(
			companyId, filterString, KBArticle.class.getName(), _entityModel,
			_getFilterParser(), locale);
	}

	private FilterParser _getFilterParser() {
		return _filterParserProvider.provide(_entityModel);
	}

	private KBArticle _getKBArticle(Document document) throws PortalException {
		long resourcePrimKey = GetterUtil.getLong(
			document.get(Field.ENTRY_CLASS_PK));

		return _kbArticleLocalService.getLatestKBArticle(resourcePrimKey, 0);
	}

	private List<KBArticle> _getKBArticles(Hits hits) throws PortalException {
		Document[] documents = hits.getDocs();

		List<KBArticle> kbArticles = new ArrayList<>(documents.length);

		for (Document document : documents) {
			kbArticles.add(_getKBArticle(document));
		}

		return kbArticles;
	}

	private static final EntityModel _entityModel = new KBArticleEntityModel();

	@Reference
	private FilterParserProvider _filterParserProvider;

	@Reference
	private KBArticleLocalService _kbArticleLocalService;

	@Reference
	private ODataSearchAdapter _oDataSearchAdapter;

}



KBArticleEntityModel.java

package com.liferay.segments.criteria.extension.sample.internal.odata.entity;

public class KBArticleEntityModel implements EntityModel {

	public static final String NAME = "KBArticle";

	public KBArticleEntityModel() {
		_entityFieldsMap = Stream.of(
			new StringEntityField("title", locale -> "titleKeyword")
		).collect(
			Collectors.toMap(EntityField::getName, Function.identity())
		);
	}

	@Override
	public Map<String, EntityField> getEntityFieldsMap() {
		return _entityFieldsMap;
	}

	@Override
	public String getName() {
		return NAME;
	}

	private final Map<String, EntityField> _entityFieldsMap;

}

Now create the `SegmentsCriteriaContributor` class that consumes the previous 
classes to retrieve the articles that match the query generated by the criteria 
editor, and contributes a query to filter users based on the articles they 
authored.

UserKBArticleSegmentCritieriaContributor.java:

package com.liferay.segments.criteria.extension.sample.internal.criteria.contributor;

@Component(
	immediate = true,
	property = {
		"segments.criteria.contributor.key=" + UserKBArticleSegmentsCriteriaContributor.KEY,
		"segments.criteria.contributor.model.class.name=com.liferay.portal.kernel.model.User",
		"segments.criteria.contributor.priority:Integer=70"
	},
	service = SegmentsCriteriaContributor.class
)
public class UserKBArticleSegmentsCriteriaContributor
	implements SegmentsCriteriaContributor {

	public static final String KEY = "user-kb-article";

	@Override
	public void contribute(
		Criteria criteria, String filterString,
		Criteria.Conjunction conjunction) {

		criteria.addCriterion(getKey(), getType(), filterString, conjunction);

		long companyId = CompanyThreadLocal.getCompanyId();
		String newFilterString = null;

		try {
			StringBundler sb = new StringBundler();

			List<KBArticle> kbArticles = _oDataRetriever.getResults(
				companyId, filterString, LocaleUtil.getDefault(),
				QueryUtil.ALL_POS, QueryUtil.ALL_POS);

			for (int i = 0; i < kbArticles.size(); i++) {
				KBArticle kbArticle = kbArticles.get(i);

				sb.append("(userId eq '");
				sb.append(kbArticle.getUserId());
				sb.append("')");

				if (i < (kbArticles.size() - 1)) {
					sb.append(" or ");
				}
			}

			newFilterString = sb.toString();
		}
		catch (PortalException pe) {
			_log.error(
				com.liferay.petra.string.StringBundler.concat(
					"Unable to evaluate criteria ", criteria, " with filter ",
					filterString, " and conjunction ", conjunction.getValue()),
				pe);
		}

		if (Validator.isNull(newFilterString)) {
			newFilterString = "(userId eq '0')";
		}

		criteria.addFilter(getType(), newFilterString, conjunction);
	}

	@Override
	public EntityModel getEntityModel() {
		return _entityModel;
	}

	@Override
	public String getEntityName() {
		return KBArticleEntityModel.NAME;
	}

	@Override
	public List<Field> getFields(PortletRequest portletRequest) {
		return Collections.singletonList(
			new Field(
				"title",
				LanguageUtil.get(_portal.getLocale(portletRequest), "title"),
				"string"));
	}

	@Override
	public String getKey() {
		return KEY;
	}

	@Override
	public Criteria.Type getType() {
		return Criteria.Type.MODEL;
	}

	private static final Log _log = LogFactoryUtil.getLog(
		UserKBArticleSegmentsCriteriaContributor.class);

	private static final EntityModel _entityModel = new KBArticleEntityModel();

	@Reference(
		target = "(model.class.name=com.liferay.knowledge.base.model.KBArticle)"
	)
	private ODataRetriever<KBArticle> _oDataRetriever;

	@Reference
	private Portal _portal;

}

After deploying your extension, the segment criteria editor includes a new section with the Knowledge Base properties. Notice that the UI of the section, the properties and their associated input fields and operations have been automatically generated based on the information provided by the extension services. For instance, the Knowledge Base article title supports equals, not equals, contains and not contains operations because it was defined as a StringEntityField.

![Figure 1: The sample field will display.](../../images/segment-new-category.png)
